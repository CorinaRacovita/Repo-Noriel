/**
 * @namespace ZEPHYR.REPORTS.BURNDOWN
 */
var ZEPHYR = ZEPHYR || {};
ZEPHYR.REPORTS = ZEPHYR.REPORTS || {};

ZEPHYR.REPORTS.ISGADGET = false;

ZEPHYR.REPORTS.BURNDOWN = function () {};

ZEPHYR.REPORTS.BURNDOWN.prototype = AJS.$.extend(ZEPHYR.REPORTS.BURNDOWN.prototype, {
    data: {},
    resize: function () {
        if(Object.keys(this.data).length) {
            this.drawChart(this.data);
        }
    },
    getBurndownExecutions: function (projectId, versionId, cycle, folderId, burnDownChartType, isGadget, callback) {
        if (isGadget) {
            ZEPHYR.REPORTS.ISGADGET = true;
        }
        var that = this,
            ajaxOptions = {
                url: ZEPHYR.TEST.ContextPath.getZContextPath() + 'public/rest/api/' + ZEPHYR.API.Version.getVersion() + '/executioncount?projectId=' + projectId + '&groupFld=timePeriod&periodName=daily&versionId=' + versionId + '&cycleId=' + cycle + (folderId ? '&folderId=' + folderId : '') + '&burnDownChartType=' + burnDownChartType,
                type: 'GET',
                contentType: 'application/json',
                success: function (data) {
                    // var data = {
                    //     'data': {
                    //         'PredictionGraphDataMap': {
                    //             '1427913000000': 5,
                    //             '1429276788873': 3
                    //         },
                    //         'UnexecutedGraphDataMap': {
                    //             '1424025000000': 0,
                    //             '1424111400000': 0,
                    //             '1424197800000': 0,
                    //             '1424284200000': 0,
                    //             '1424370600000': 0,
                    //             '1424457000000': 0,
                    //             '1424543400000': 0,
                    //             '1424629800000': 0,
                    //             '1424716200000': 0,
                    //             '1424802600000': 0,
                    //             '1424889000000': 0,
                    //             '1424975400000': 0,
                    //             '1425061800000': 0,
                    //             '1425148200000': 0,
                    //             '1425234600000': 0,
                    //             '1425321000000': 0,
                    //             '1425407400000': 0,
                    //             '1425493800000': 0,
                    //             '1425580200000': 0,
                    //             '1425666600000': 0,
                    //             '1425753000000': 0,
                    //             '1425839400000': 0,
                    //             '1425925800000': 0,
                    //             '1426012200000': 0,
                    //             '1426098600000': 2,
                    //             '1426185000000': 2,
                    //             '1426271400000': 2,
                    //             '1426357800000': 2,
                    //             '1426444200000': 2,
                    //             '1426530600000': 2,
                    //             '1426617000000': 2,
                    //             '1426703400000': 2,
                    //             '1426789800000': 2,
                    //             '1426876200000': 2,
                    //             '1426962600000': 2,
                    //             '1427049000000': 2,
                    //             '1427135400000': 2,
                    //             '1427221800000': 2,
                    //             '1427308200000': 2,
                    //             '1427394600000': 2,
                    //             '1427481000000': 2,
                    //             '1427567400000': 2,
                    //             '1427653800000': 2,
                    //             '1427740200000': 2,
                    //             '1427826600000': 2,
                    //             '1427913000000': 5
                    //         }
                    //     },
                    //     'executionRate': '0.22\r\n',
                    //     'executionsRemaining': 5,
                    //     'completionDate': '04-25-2015'
                    // };

                    if (data) {
                        if (Object.keys(data).length === 0) {
                            // TODO : Identify reqParams
                            // AJS.$('#' + reqParams.chartDivId).html('No data found for chart ' + reqParams.title).css('color', '#1F77B4');
                        } else {
                            that.drawChart(data);
                            that.data = data;
                        }
                    }
                    if (callback instanceof Function) {
                        callback('success', true);
                    }
                    ZEPHYR.Loading.hideLoadingIndicator();
                },
                error: function (response) {
                    AJS.$('#zephyr-test-report').children().not('#back').remove();
                    if (callback instanceof Function) {
                        callback(JSON.parse(response.responseText), false);
                    }
                    ZEPHYR.Loading.hideLoadingIndicator();
                }
            };
        ZEPHYR.Loading.showLoadingIndicator();
        AJS.$.ajax(ajaxOptions);
    },
    drawChart: function(schedules) {
        var chartDiv,
            size = Object.keys(schedules.data.UnexecutedGraphDataMap).length;
        if (schedules && schedules.data && size > 0) {
            var i,
                data = [],
                doSortByDate = function (responseData) {
                    var series1Array = new Array();
                    AJS.$.each(responseData, function (key, value) {
                        series1Array.push([key, value]);
                    });
                    // Sort on Timestamp!
                    series1Array.sort(function (a, b) {
                        return (a[0] - b[0]);
                    });
                    return series1Array;
                },
                timeSortedDataArray1 = doSortByDate(schedules.data.UnexecutedGraphDataMap),
                timeSortedDataArray2 = doSortByDate(schedules.data.PredictionGraphDataMap),
                timeSeries = [{
                    data: timeSortedDataArray1,
                    dashes: {
                        show: false
                    },
                    lines: {
                        show: true
                    }
                }, {
                    data: timeSortedDataArray2,
                    dashes: {
                        show: true
                    },
                    lines: {
                        show: false
                    }
                }];

            for (i = 0; i < timeSortedDataArray1.length; i++) {
                data.push({
                    date: timeSortedDataArray1[i][0]
                });
            }
            for (i = 0; i < timeSortedDataArray2.length; i++) {
                data.push({
                    date: timeSortedDataArray2[i][0]
                });
            }

            chartDiv = '<div id="chartdiv" align="center" style="height:100%; width:100%; min-width:400px; margin:auto"/><div id="chartLegend" align="bottom" style="height:50px; width:100%; position:fixed; bottom:0px;"/>';

            AJS.$('#zephyr-test-report').children().not('#back').remove();
            AJS.$(chartDiv).appendTo(AJS.$('#zephyr-test-report'));
            this.showChart(schedules, data, timeSortedDataArray1, timeSortedDataArray2);
        }
    },
    showChart: function(schedules, data, timeSortedDataArray1, timeSortedDataArray2) {
        if (data.length == 0) {
            return false
        };
        AJS.$('#chartdiv').empty();

        try {
            // Remove the tooltip element if already exist
            AJS.$('.d3-tip').remove();

            var avgExecRate = Messages('je.gadget.unexecuted.schedules.tooltip.avgrate');
            var unExecRemaining = Messages('je.gadget.unexecuted.schedules.tooltip.remaining');
            var eta = Messages('je.gadget.unexecuted.schedules.tooltip.expected.date');
            var completionDate = 'unknown'
            if (schedules.completionDate != null) {
                completionDate = schedules.completionDate;
            }

           
            // custom tool tip
            var tooltip = d3.select('#chartdiv')
                            .append('div')
                            .attr('class', 'tooltip')
                            .style('position', 'absolute')
                            .style('z-index', '10')
                            .style('visibility', 'hidden');

            var formatDate = d3.time.format('%b - %d');
            // Set the dimensions of the graph
            var margin = {
                    top: 30,
                    right: 20,
                    bottom: 30,
                    left: 50
                },
                width = 800;

            if (ZEPHYR.REPORTS.ISGADGET) {
                width = 500;
            }

            width = AJS.$('#chartdiv').width() || width;
            width = width - margin.left - margin.right;

            var height = 500 - margin.top - margin.bottom,
                x = d3.time.scale().range([0, width]),
                y = d3.scale.linear().range([height, 0]),
                xAxis = d3.svg.axis().scale(x).orient('bottom').ticks(4).tickFormat(formatDate),
                yAxis = d3.svg.axis().scale(y).orient('left').tickSize(-width),
                max = d3.max([d3.max(timeSortedDataArray1, function (d) {
                        return d[1];
                    }),
                    d3.max(timeSortedDataArray2, function (d) {
                        return d[1];
                    })
                ]);

            var area = d3.svg.area()
                .interpolate('monotone')
                .x(function(d) {
                    return x(d[0]);
                })
                .y0(height)
                .y1(function(d) {
                    return y(d[1]);
                });

            var line = d3.svg.line()
                .x(function (d) {
                    return x(d[0]);
                })
                .y(function (d) {
                    return y(d[1]);
                });

            var svg = d3.select('#chartdiv')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom);

            x.domain(d3.extent(data.map(function(d) {
                return d.date;
            })));
            y.domain([0, max + 1]);

       

            var groupEl = svg.append('g')
                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

            groupEl.append('g')
                .attr('class', 'x axis')
                .attr('transform', 'translate(0,' + height + ')')
                .call(xAxis);

            groupEl.append('g')
                .attr('class', 'y axis')
                .call(yAxis);

            groupEl.append('path')
                .datum(timeSortedDataArray1)
                .attr('class', 'burndown-line')
                .attr('d', line(timeSortedDataArray1))
                .attr('d', area(timeSortedDataArray1))
                .style('fill', function (d) {
                    return '#E1EFEF';
                });

            groupEl.selectAll('dot')
                .data(timeSortedDataArray1)
                .enter()
                .append('circle')
                .attr('r', 1.5)
                .attr('cx', function (d) {
                    return x(d[0]);
                })
                .attr('cy', function (d) {
                    return y(d[1]);
                })
                .style('stroke', '#B3D7D8')
                .style('stroke-width', '3px')
                .on('mouseover',function(){
                 
                    tooltip.style('visibility', 'visible').html('<span>' + avgExecRate + ' <b>' + Number(schedules.executionRate).toFixed(2) +
                    '</b><br/>' + unExecRemaining + ' ' + schedules.executionsRemaining +
                    '<br/>' + eta + ' ' + completionDate + '</span><br/>')
                } )
                .on('mousemove',function(){
                    var leftoffset = 10
                    if(d3.event.pageX > width/2){
                        leftoffset = 100
                    }
                    tooltip.style('top', (d3.event.pageY - 70) + 'px')
                    .style('left', (d3.event.pageX - leftoffset) + 'px');
                })
                .on('mouseout', function(){
                    
                    tooltip.style('visibility', 'hidden');
                })
              

            groupEl.append('path')
                .datum(timeSortedDataArray1)
                .attr('class', 'line')
                .attr('d', line(timeSortedDataArray2))
                .style('stroke-dasharray', (5, 5));
        } catch (exe) {
            // First time after gadget configuration update, height and width are coming as zero or so and hence exception is thrown.
            // Since we are calling chart again during resize, do nothing in first call!
            console.log(exe);
        }
    }
});
